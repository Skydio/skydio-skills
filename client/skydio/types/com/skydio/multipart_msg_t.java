/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package com.skydio;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class multipart_msg_t implements lcm.lcm.LCMEncodable
{
    public int id;
    public int total_size;
    public String channel;
    public byte chunk_index;
    public byte chunk_count;
    public int chunk_size;
    public byte chunk_data[];
 
    public multipart_msg_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7cb65caa4d5d6c99L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(com.skydio.multipart_msg_t.class))
            return 0L;
 
        classes.add(com.skydio.multipart_msg_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.id); 
 
        outs.writeInt(this.total_size); 
 
        __strbuf = new char[this.channel.length()]; this.channel.getChars(0, this.channel.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte(this.chunk_index); 
 
        outs.writeByte(this.chunk_count); 
 
        outs.writeInt(this.chunk_size); 
 
        if (this.chunk_size > 0)
            outs.write(this.chunk_data, 0, chunk_size);
 
    }
 
    public multipart_msg_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public multipart_msg_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static com.skydio.multipart_msg_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        com.skydio.multipart_msg_t o = new com.skydio.multipart_msg_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.id = ins.readInt();
 
        this.total_size = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.channel = new String(__strbuf);
 
        this.chunk_index = ins.readByte();
 
        this.chunk_count = ins.readByte();
 
        this.chunk_size = ins.readInt();
 
        this.chunk_data = new byte[(int) chunk_size];
        ins.readFully(this.chunk_data, 0, chunk_size); 
    }
 
    public com.skydio.multipart_msg_t copy()
    {
        com.skydio.multipart_msg_t outobj = new com.skydio.multipart_msg_t();
        outobj.id = this.id;
 
        outobj.total_size = this.total_size;
 
        outobj.channel = this.channel;
 
        outobj.chunk_index = this.chunk_index;
 
        outobj.chunk_count = this.chunk_count;
 
        outobj.chunk_size = this.chunk_size;
 
        outobj.chunk_data = new byte[(int) chunk_size];
        if (this.chunk_size > 0)
            System.arraycopy(this.chunk_data, 0, outobj.chunk_data, 0, this.chunk_size); 
        return outobj;
    }
 
}
